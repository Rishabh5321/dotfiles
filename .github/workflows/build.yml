name: Build_Config
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Generate matrix from nixosConfigurations
        id: set-matrix
        run: |
          HOSTS=$(nix flake show --json | jq -c '[.nixosConfigurations | keys[]]')
          echo "matrix={\"hostname\":$HOSTS}" >> "$GITHUB_OUTPUT"

  Build_Config:
    name: Build_Config ${{ matrix.hostname }}
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000
            substituters = https://rishabh5321.cachix.org https://cache.nixos.org https://hyprland.cachix.org https://nixpkgs-wayland.cachix.org https://nix-gaming.cachix.org
            trusted-public-keys = rishabh5321.cachix.org-1:mxfBIH2XElE6ieFXXYBA9Ame4mVTbAf1TGR843siggk= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= nix-gaming.cachix.org-1:nbjlureqMbRAxR1gJ/f3hxemL9svXaZF/Ees8vCUUs4=

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: rishabh5321
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Run flake check and check for warnings
        id: flake-check
        run: |
          mkdir -p logs
          
          # Run flake check and capture output
          set +e
          nix flake check -L 2>&1 | tee logs/flake_check.log
          FLAKE_EXIT_CODE=$?
          
          # Check for warnings in the flake check output
          if grep -i "warning" logs/flake_check.log; then
            echo "::error::Warnings detected in the flake check output"
            echo "warnings_found=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Exit with the original flake check exit code if no warnings
          exit $FLAKE_EXIT_CODE

      - name: Build and check for warnings
        id: build
        run: |
          echo "Starting Nix build for ${{ matrix.hostname }}..."
          
          # Create a temporary file for capturing output
          mkdir -p logs
          
          # Run the build and capture output to both stdout and a file
          set +e  # Don't exit on error yet
          
          cachix watch-exec rishabh5321 -- \
            nix build .#nixosConfigurations.${{ matrix.hostname }}.config.system.build.toplevel \
            -L --print-build-logs --out-link result-${{ matrix.hostname }} 2>&1 | tee logs/build_output.log
          
          BUILD_EXIT_CODE=$?
          
          echo "Build complete for ${{ matrix.hostname }} without warnings"

      - name: Set date
        id: get-date
        if: always()
        run: echo "date=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"

      - name: Determine final status
        id: final-status
        if: always()
        run: |
          flake_status="${{ steps.flake-check.outcome }}"
          build_status="${{ steps.build.outcome }}"
          if [[ "$flake_status" == "success" && "$build_status" == "success" ]]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=error" >> "$GITHUB_OUTPUT"
          fi

      - name: Get branch name
        id: get-branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "branch=${{ github.event.pull_request.base.ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "branch=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

      # Combine logs for Telegram
      - name: Prepare logs for Telegram
        if: always()
        run: |
          echo "=== FLAKE CHECK LOG ===" > combined_logs.txt
          cat logs/flake_check.log >> combined_logs.txt
          echo -e "\n\n=== BUILD OUTPUT LOG ===" >> combined_logs.txt
          cat logs/build_output.log >> combined_logs.txt

      - name: Send Telegram message with logs
        if: always()
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            ${{ steps.final-status.outputs.status == 'success' && '✅' || '❌' }} *Build:* `${{ matrix.hostname }}`
            *Date:* `${{ steps.get-date.outputs.date }}`
            *Flake Check:* `${{ steps.flake-check.outcome }}`
            *Branch:* `${{ steps.get-branch.outputs.branch }}`
            *Build Status:* `${{ steps.build.outcome }}`
            *Workflow:* [Run Link](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          document: combined_logs.txt