name: Check and Build Flake Config
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      specific_host:
        description: "Build only a specific host (leave empty for all)"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # These two jobs now run in parallel since they're independent
  flake-checks:
    name: Flake Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000
            substituters = https://rishabh5321.cachix.org https://cache.nixos.org https://hyprland.cachix.org https://nixpkgs-wayland.cachix.org https://nix-gaming.cachix.org
            trusted-public-keys = rishabh5321.cachix.org-1:mxfBIH2XElE6ieFXXYBA9Ame4mVTbAf1TGR843siggk= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= nix-gaming.cachix.org-1:nbjlureqMbRAxR1gJ/f3hxemL9svXaZF/Ees8vCUUs4=

      - name: Run Flake Check
        id: flake_check
        run: |
          nix flake check

  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Generate matrix from nixosConfigurations
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.specific_host }}" ]; then
            # If a specific host was provided, only build that one
            HOSTS=$(echo '["${{ github.event.inputs.specific_host }}"]' | jq -c .)
          else
            # Otherwise build all hosts from the flake
            HOSTS=$(nix flake show --json | jq -c '[.nixosConfigurations | keys[]]')
          fi
          echo "matrix={\"hostname\":$HOSTS}" >> "$GITHUB_OUTPUT"

  Build_Config:
    name: Build ${{ matrix.hostname }}
    needs: [flake-checks, generate-matrix]
    runs-on: ubuntu-latest
    timeout-minutes: 180 # Prevent hung builds
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000
            substituters = https://rishabh5321.cachix.org https://cache.nixos.org https://hyprland.cachix.org https://nixpkgs-wayland.cachix.org https://nix-gaming.cachix.org
            trusted-public-keys = rishabh5321.cachix.org-1:mxfBIH2XElE6ieFXXYBA9Ame4mVTbAf1TGR843siggk= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA= nix-gaming.cachix.org-1:nbjlureqMbRAxR1gJ/f3hxemL9svXaZF/Ees8vCUUs4=

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: rishabh5321
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build NixOS configuration
        id: build
        run: |
          echo "Starting Nix build for ${{ matrix.hostname }}..."

          mkdir -p logs
          start_time=$(date +%s)

          cachix watch-exec rishabh5321 -- \
            nix build .#nixosConfigurations.${{ matrix.hostname }}.config.system.build.toplevel \
            -L --print-build-logs --out-link result-${{ matrix.hostname }} 2>&1 | tee logs/build_output.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          end_time=$(date +%s)
          build_duration=$((end_time - start_time))
          echo "Build duration: $build_duration seconds"
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "Generating system report for ${{ matrix.hostname }}..."
            nix-shell -p nix-info --run "nix-info -m" > logs/system_info.log

            nix path-info --json ./result-${{ matrix.hostname }} | jq 'if type == "array" then .[0] else . end | {path: .path, closureSize: .closureSize}' > logs/build_info.json

            CLOSURE_SIZE=$(jq -r '.closureSize' logs/build_info.json)
            if [[ "$CLOSURE_SIZE" != "null" && -n "$CLOSURE_SIZE" ]]; then
              HUMAN_SIZE=$(numfmt --to=iec-i --suffix=B "$CLOSURE_SIZE")
              echo "closure_size=$HUMAN_SIZE" >> $GITHUB_OUTPUT
            else
              echo "closure_size=unknown" >> $GITHUB_OUTPUT
              echo "Warning: closure size is null or empty"
            fi
          fi

          # --- [2] Trim log files to 500KB max ---
          MAX_SIZE=500000
          for f in logs/*.log; do
            if [ -f "$f" ]; then
              size=$(stat -c %s "$f")
              if [ "$size" -gt "$MAX_SIZE" ]; then
                echo "Truncating $f to ${MAX_SIZE} bytes..."
                tail -c "$MAX_SIZE" "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              fi
            fi
          done

          # --- [3] Add metadata.json ---
          jq -n \
            --arg hostname "${{ matrix.hostname }}" \
            --argjson status "$BUILD_EXIT_CODE" \
            --arg duration "$build_duration" \
            --arg closure_size "${HUMAN_SIZE:-unknown}" \
            --arg commit "${{ github.sha }}" \
            --arg workflow "${{ github.workflow }}" \
            --arg run_id "${{ github.run_id }}" \
            '{
              hostname: $hostname,
              status: (if $status == 0 then "success" else "failure" end),
              build_duration_seconds: ($duration | tonumber),
              closure_size: $closure_size,
              commit: $commit,
              workflow: $workflow,
              run_id: $run_id
            }' > logs/metadata.json

          exit $BUILD_EXIT_CODE

      - name: Determine final status
        id: final-status
        if: always()
        run: |
          build_status="${{ steps.build.outcome }}"
          if [[ "$build_status" == "success" ]]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=error" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload build status artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-status-${{ matrix.hostname }}
          path: |
            ${{ runner.temp }}/status.txt
          pre-upload-actions: |
            echo "${{ matrix.hostname }}:${{ job.status }}" > ${{ runner.temp }}/status.txt

  notify_telegram:
    name: Send Telegram Notification
    runs-on: ubuntu-latest
    needs: [Build_Config] # This job waits for all matrix jobs of Build_Config
    if: always() # Run this job even if some matrix builds failed
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build status artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-status-*
          path: /tmp/build-statuses

      - name: Determine overall status
        id: determine_status
        run: |
          SUCCESS_HOSTS=()
          FAILED_HOSTS=()
          STATUS_DIR="/tmp/build-statuses"

          # Check if the directory exists and has status files
          if [ -d "$STATUS_DIR" ] && [ "$(ls -A $STATUS_DIR)" ]; then
            for file in "$STATUS_DIR"/*; do
              while IFS=':' read -r hostname status; do
                if [[ "$status" == "success" ]]; then
                  SUCCESS_HOSTS+=("`$hostname`")
                else
                  FAILED_HOSTS+=("`$hostname` ($status)")
                fi
              done < "$file"
            done
          fi

          # Generate the final status message
          MESSAGE=""
          if [ ${#FAILED_HOSTS[@]} -eq 0 ] && [ ${#SUCCESS_HOSTS[@]} -gt 0 ]; then
            MESSAGE="✅ All builds successful!"
          elif [ ${#FAILED_HOSTS[@]} -gt 0 ]; then
            MESSAGE="❌ Build failed!"
          elif [[ "${{ needs.Build_Config.result }}" == "cancelled" ]]; then
            MESSAGE="🛑 Build cancelled."
          else
            MESSAGE="❓ Build status unknown. The build job may have been skipped or failed early."
          fi

          if [ ${#SUCCESS_HOSTS[@]} -gt 0 ]; then
            MESSAGE+=$'\n\n*Successful Hosts:*\n'
            MESSAGE+=$(printf -- "- %s\n" "${SUCCESS_HOSTS[@]}")
          fi

          if [ ${#FAILED_HOSTS[@]} -gt 0 ]; then
            MESSAGE+=$'\n\n*Failed Hosts:*\n'
            MESSAGE+=$(printf -- "- %s\n" "${FAILED_HOSTS[@]}")
          fi

          # Use a heredoc to safely handle multi-line output
          cat <<EOF >> "$GITHUB_OUTPUT"
          message_status=$MESSAGE
          EOF

      - name: Get branch/PR info
        id: get-ref-info
        run: |
          # ... (this step remains unchanged)
          # ... (for brevity, its content is omitted here)

      - name: Send Telegram Message
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            *GitHub Actions Build Status*
            Workflow: `${{ github.workflow }}`
            Repository: `${{ github.repository }}`
            ${{ steps.get-ref-info.outputs.ref_info }}
            Commit: `${{ github.sha }}`

            *Status:*
            ${{ steps.determine_status.outputs.message_status }}

            View run details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          format: markdown # Use markdown formatting for the message
