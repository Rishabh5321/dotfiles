# .github/workflows/flake_build.yml
name: flake_build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-configurations:
    name: Build NixOS Configurations
    runs-on: ubuntu-latest
    permissions: # Optional: Define minimal permissions
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          install_url: https://nixos.org/nix/install
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            download-buffer-size = 500000000 # Consider if this large buffer is strictly necessary

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
        with:
          name: pkgss # Replace with your actual cache name
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Check Dell Configuration
        id: build_dell
        run: |
          log_file="build_dell.log"
          filtered_log_file="build_dell_filtered.log"
          echo "::group::Running Nix dry-run for Dell"
          # Run nix build, capture all output, add trace on error
          if nix build .#nixosConfigurations.dell.config.system.build.toplevel --dry-run --show-trace > "$log_file" 2>&1; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "log_path=$filtered_log_file" >> $GITHUB_OUTPUT
            echo "Dell configuration check completed successfully." > "$filtered_log_file" # Keep file for consistency
            echo "::notice file=$log_file::Dell build dry-run successful."
          else
            # Build failed
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "log_path=$filtered_log_file" >> $GITHUB_OUTPUT
            # Extract relevant lines: try errors/warnings first, fallback to tail, limit lines
            {
              echo "Dell check failed. Relevant log lines:"
              grep -E '(error:|warning:)' "$log_file" || tail -n 20 "$log_file"
            } | head -n 30 > "$filtered_log_file" # Limit total output for notification
            echo "::error file=$log_file::Dell build dry-run failed. Check logs."
          fi
          echo "::endgroup::"
          echo "--- Filtered Log Snippet (Dell) ---"
          cat "$filtered_log_file"
          echo "--- End Filtered Log Snippet ---"


      - name: Check Redmi Configuration
        id: build_redmi
        # Use always() to ensure this runs even if the Dell check fails
        if: always()
        run: |
          log_file="build_redmi.log"
          filtered_log_file="build_redmi_filtered.log"
          echo "::group::Running Nix dry-run for Redmi"
          if nix build .#nixosConfigurations.redmi.config.system.build.toplevel --dry-run --show-trace > "$log_file" 2>&1; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "log_path=$filtered_log_file" >> $GITHUB_OUTPUT
            echo "Redmi configuration check completed successfully." > "$filtered_log_file"
            echo "::notice file=$log_file::Redmi build dry-run successful."
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "log_path=$filtered_log_file" >> $GITHUB_OUTPUT
            {
              echo "Redmi check failed. Relevant log lines:"
              grep -E '(error:|warning:)' "$log_file" || tail -n 20 "$log_file"
            } | head -n 30 > "$filtered_log_file"
            echo "::error file=$log_file::Redmi build dry-run failed. Check logs."
          fi
          echo "::endgroup::"
          echo "--- Filtered Log Snippet (Redmi) ---"
          cat "$filtered_log_file"
          echo "--- End Filtered Log Snippet ---"

      - name: Generate Job Summary
        # Use always() to ensure summary is generated even on partial failure
        if: always()
        run: |
          echo "## NixOS Configuration Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Dell Configuration:** ${{ steps.build_dell.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.build_dell.outputs.status }}" == "failed" ]]; then
            echo "<details><summary>Dell Log Snippet</summary>" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            # Use html escaping for safety inside summary markdown
            cat "${{ steps.build_dell.outputs.log_path }}" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g;' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Redmi Configuration:** ${{ steps.build_redmi.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.build_redmi.outputs.status }}" == "failed" ]]; then
            echo "<details><summary>Redmi Log Snippet</summary>" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat "${{ steps.build_redmi.outputs.log_path }}" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g;' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Check workflow run logs for full details.*" >> $GITHUB_STEP_SUMMARY

      # Option 1: Improved Bash Script for Telegram Notification
      - name: Send Telegram Notification (Bash)
        # Use always() to ensure notification is sent even on failure
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          DELL_STATUS: ${{ steps.build_dell.outputs.status }}
          REDMI_STATUS: ${{ steps.build_redmi.outputs.status }}
          DELL_LOG_PATH: ${{ steps.build_dell.outputs.log_path }}
          REDMI_LOG_PATH: ${{ steps.build_redmi.outputs.log_path }}
          BRANCH_NAME: ${{ github.ref_name }}
          REPO_NAME: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Determine overall status and emoji
          if [[ "$DELL_STATUS" == "passed" && "$REDMI_STATUS" == "passed" ]]; then
            STATUS_ICON="✅"
            STATUS_TEXT="Passed"
          else
            STATUS_ICON="❌"
            STATUS_TEXT="Failed"
          fi

          # Basic Status Line
          STATUS_LINE="$STATUS_ICON NixOS checks for *$REPO_NAME* ($BRANCH_NAME) *$STATUS_TEXT*"

          # Detailed Status
          DETAILS="Dell Config: \`$DELL_STATUS\`%0ARedmi Config: \`$REDMI_STATUS\`"

          # Function to read, format, and URL-encode log snippet
          format_log() {
            local log_path="$1"
            local max_lines=15 # Limit lines further for Telegram
            # Read file, add line numbers, limit lines, escape Markdown backticks, then URL-encode
            awk '{print NR". "$0}' "$log_path" | head -n $max_lines | sed 's/`/\\`/g' | perl -MURI::Escape -ne 'chomp; print uri_escape($_), "%0A"'
          }

          DELL_LOG_SNIPPET=""
          if [[ "$DELL_STATUS" == "failed" && -s "$DELL_LOG_PATH" ]]; then
            ENCODED_LOG=$(format_log "$DELL_LOG_PATH")
            DELL_LOG_SNIPPET="%0A%0ADell Issues:%0A\`\`\`%0A${ENCODED_LOG}\`\`\`"
          fi

          REDMI_LOG_SNIPPET=""
          if [[ "$REDMI_STATUS" == "failed" && -s "$REDMI_LOG_PATH" ]]; then
            ENCODED_LOG=$(format_log "$REDMI_LOG_PATH")
            REDMI_LOG_SNIPPET="%0A%0ARedmi Issues:%0A\`\`\`%0A${ENCODED_LOG}\`\`\`"
          fi

          # Construct final message body (URL encoded)
          MESSAGE_BODY=$(cat <<EOF | perl -MURI::Escape -ne 'chomp; print uri_escape($_), "%0A"'
          $STATUS_LINE

          $DETAILS

          [View Workflow Run]($RUN_URL)
          Generated on $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')
          EOF
          )
          # Append non-URL-encoded snippets (they are already encoded)
          MESSAGE_BODY+="${DELL_LOG_SNIPPET}${REDMI_LOG_SNIPPET}"


          # Send notification
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${CHAT_ID}" \
            --data-urlencode "text=${MESSAGE_BODY}" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true" # Optional: cleaner look
