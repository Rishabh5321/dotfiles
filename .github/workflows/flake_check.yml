name: flake_check
on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  flake-checks:
    name: flake_check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          install_url: https://nixos.org/nix/install
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
      - name: Run flake check and capture logs
        id: flake_check
        run: |
          nix flake check 2>&1 | tee flake_check.log || true
          grep -E "(warning:|error:)" flake_check.log > flake_check_filtered.log || echo "No warnings or errors." > flake_check_filtered.log
          echo "flake_check_log=$(jq -Rs . < flake_check_filtered.log)" >> $GITHUB_ENV
      - name: Debug Logs
        run: |
          echo "Flake Check Log:"
          cat flake_check_filtered.log
      - name: Send Telegram Notification
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          REPO_NAME="${{ github.repository }}"
          
          # Process log output - organize warnings by type and number them
          if [ -s flake_check_filtered.log ]; then
            # Create a more readable log with numbered entries
            COUNT=1
            echo "" > organized_log.txt
            
            # Group general warnings
            grep -v "evaluation warning:" flake_check_filtered.log | while read -r LINE; do
              echo "$COUNT. $LINE" >> organized_log.txt
              COUNT=$((COUNT+1))
            done
            
            # Add a separator if both types of warnings exist
            if grep -q "evaluation warning:" flake_check_filtered.log && grep -v -q "evaluation warning:" flake_check_filtered.log; then
              echo "" >> organized_log.txt
              echo "Evaluation warnings:" >> organized_log.txt
            fi
            
            # Process evaluation warnings, removing duplicates
            if grep -q "evaluation warning:" flake_check_filtered.log; then
              grep "evaluation warning:" flake_check_filtered.log | sort | uniq | while read -r LINE; do
                echo "$COUNT. $LINE" >> organized_log.txt
                COUNT=$((COUNT+1))
              done
            fi
            
            ORGANIZED_LOG=$(cat organized_log.txt | sed ':a;N;$!ba;s/\n/\\n/g')
          else
            ORGANIZED_LOG="No warnings or errors found."
          fi
          
          # Create status message
          if [[ "${{ job.status }}" == "success" ]]; then
            MESSAGE="✅ Flake check for $REPO_NAME completed successfully on branch $BRANCH_NAME."
          else
            MESSAGE="❌ Flake check for $REPO_NAME failed on branch $BRANCH_NAME. Check GitHub Actions for details."
          fi
          
          # Truncate logs to fit Telegram's message limit (4096 characters)
          ORGANIZED_LOG_TRUNCATED=$(echo "$ORGANIZED_LOG" | cut -c -3500)
          
          # Send the message with organized logs
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
            -d chat_id=$CHAT_ID \
            -d parse_mode=HTML \
            -d text="<b>$MESSAGE</b>%0A%0A<b>Flake Check Results:</b>%0A$ORGANIZED_LOG_TRUNCATED%0A%0A<i>Generated on $(date)</i>"